#if !defined(_main_)
#  define _main_

class model_data : public ad_comm{
  ofstream *   pad_means_out;
  ofstream *   pad_alts_proj;
  ofstream *   pad_percent_out;
  ofstream *   pad_percent_db;
  ofstream *   pad_Alt3bstuff;
  ofstream *   pad_detail_out;
  ofstream *   pad_prof_F;
  int condition_SR;
  int ssl_iter;
  int ipro;
  int rnseed;
  int alt;
  data_int nalts;
  data_ivector alt_list;
  data_int TAC_ABC;
  data_int SrType;
  data_int Rec_Gen;
  data_int Fmsy_F35;
  data_number Rec_Cond;
  data_int Write_Big;
  data_int npro;
  data_int nsims;
  data_int styr;
  int nyrs_catch;
  data_int nyrs_catch_in;
  data_int nspp;
  data_number OY_min;
  data_number OY_max;
  data_vector ABC_Multiplier;
  data_vector N_scalar;
  data_vector Alt4_SPR;
  dvector Alt4_Fabc;
  int Alt4_Fcalc;
  dvector Alt3b_obj_fun;
  data_int ntacspp;
  data_ivector tac_ind;
  dvector model_tacs;
  data_matrix Obs_Catch;
  data_int nntmp;
  data_int nnodes;
  data_vector maxabc;
  data_matrix theta;
  dvector agg_abc;
  dvector agg_cat;
  dvector agg_tac;
  int i;
  int k;
  int dolp;
  ivector SSL_spp;
  ivector Const_Buffer;
  double srprior_a;
  double srprior_b;
  ivector ngear;
  ivector isit_const;
  dvector FABC_Adj;
  dvector spawnmo;
  ivector nages;
  dmatrix Fratiotmp;
  dmatrix M_Ftmp;
  dmatrix M_Mtmp;
  dmatrix pmaturetmp_F;
  dmatrix pmaturetmp_M;
  dmatrix wt_Ftmp;
  d3_array wt_gear_Ftmp;
  d3_array wt_gear_Mtmp;
  d3_array sel_Ftmp;
  d3_array sel_Mtmp;
  dmatrix n0_Ftmp;
  dmatrix n0_Mtmp;
  dmatrix Rtmp;
  dmatrix SSBtmp;
  ivector nrec;
  dvector Expl_Biom;
  int ntargspp;
  dvector reserved;
  ivector nsexes;
  dvector avg_5yrF;
  dvector SPR_abc;
  dvector SPR_ofl;
  dmatrix M_F;
  dmatrix M_M;
  dmatrix pmature_F;
  dmatrix pmature_M;
  dmatrix wt_F;
  dmatrix wt_M;
  dmatrix Frat;
  d3_array wt_gear_F;
  d3_array wt_gear_M;
  d3_array sel_F;
  d3_array sel_M;
  dmatrix n0_F;
  dmatrix n0_M;
  dmatrix R;
  dmatrix SSB;
  dmatrix wt_mature_F;
  dmatrix wt_mature_M;
  dvector yrfrac;
  dvector Actual_Catch;
  d3_array Rsim;
  d3_array Fsim;
  d3_array Bsim;
  d3_array Nsim;
  d3_array SRsim;
  d3_array SBsim;
  d3_array SPRsim;
  d3_array Csim;
  dmatrix TACs_by_yr;
  dmatrix ABCs_by_yr;
  dmatrix OFLs_by_yr;
  dmatrix FABCs_by_yr;
  dmatrix FOFLs_by_yr;
  double gi_beta;
  double gamma;
  dvector cvrec;
  double delta;
  dvector TAC;
  dvector ABC;
  dvector OFL;
  dvector AMeanSSB;
  dvector AMeanRec;
  dvector AMaxSSB;
  dvector HMeanRec;
  dvector Bcurrent;
  double alpha;
  int ii;
  int m;
  int j;
  double alphaCI;
  int UCI;
  int LCI;
  dmatrix N_F;
  dmatrix N_M;
  dmatrix Nnext_F;
  dmatrix Nnext_M;
  dmatrix Z_F;
  dmatrix Z_M;
  dmatrix S_F;
  dmatrix S_M;
  dvector Cabc;
  dvector Cofl;
  dvector F35;
  double Btmp;
  double SBtmp;
  double F_global;
  d3_array C_F;
  d3_array C_M;
  dvector F_yr_one;
  dmatrix F_begin_yr;
  dvector Fabc;
  dvector F40;
  dvector Fofl;
  dmatrix Ftotabc;
  dmatrix Ftot40;
  dmatrix Ftotofl;
  dmatrix N;
  dmatrix NsprF0;
  dmatrix NsprM0;
  dmatrix NsprFabc;
  dmatrix NsprMabc;
  dmatrix NsprF40;
  dmatrix NsprM40;
  dmatrix NsprFofl;
  dmatrix NsprMofl;
  dvector SB100;
  dvector SBFabc;
  dvector SBF40;
  dvector SBFofl;
  dvector Avg_Age_Mabc;
  dvector Avg_Age_M0;
  dvector Avg_Age_Fabc;
  dvector Avg_Age_F0;
  dvector Avg_Age_End;
  dvector BFabc;
  dvector BF40;
  dvector BFofl;
  dvector B100;
  double R_guess;
  dmatrix rnorms;
  dmatrix unifs;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
  static prevariable current_feval(void)
  {
    return *objective_function_value::pobjfun;
  }
private:
  ivector integer_control_flags;
  dvector double_control_flags;
  param_init_bounded_vector log_Rzero;
  param_init_bounded_vector steepness;
  param_init_bounded_vector sigr;
  param_init_number dummy;
  param_vector sr_alpha;
  param_vector beta;
  param_vector Rzero;
  param_vector rec_like;
  param_stddev_vector Bzero;
  param_vector phizero;
  param_vector phi;
  param_vector sigmaRsq;
  param_vector MSY;
  param_vector Fmsy;
  param_vector Bmsy;
  param_vector Rmsy;
  param_vector sigmar;
  param_number prior_function_value;
  param_number likelihood_function_value;
  objective_function_value obj_fun;
public:
  virtual void userfunction(void);
  virtual void report(const dvector& gradients);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void);
  void Run_Sim(void);
  void compute_obj_fun(void);
  void opt_sim(void);
 void Mainloop(int& isim);
  void Alt4_TAC(void);
 double Get_ABCs(const int& ispp);
 double Get_Catch(const int& thisalt, const int& ispp);
 double Get_F(const int& thisalt,const int& ispp);
 double Get_F_SSL_prey(const dvector& F_age, const dvector& N_females, const int ispp );
 double Get_F_Am56(const dvector& F_age, const dvector& N_females, const int ispp );
 double Get_Fofl_t(const dvector& F_age, const dvector& N_females, const int ispp );
 double Get_F_t(const dvector& F_age, const dvector& N_females, const int ispp );
 void Project_Pops(const int& isim, const int& i);
  void Status_Determ(void);
  void Fit_TAC(void);
  void Avg_Age(void);
  void get_SB100(void);
  void compute_spr_rates(void);
 double Implied_SPR( const dvector& F_age, const int& ispp);
 double SolveF2(const dvector& N_F, const dvector& N_M, const double&  TACin, const int& ispp);
 void Get_SPR_Catches(const int& ispp);
  void write_srec(void);
  void Do_Sims(void);
  void write_by_time(void);
 void write_avg_age(const adstring& Title);
  void write_alts(void);
  void write_alts_hdr(void);
 void write_ABCs(const adstring& Title);
 void write_TACs(const adstring& Title);
 void write_sim(const adstring& Title, d3_array& Outtmp);
 void write_sim(const adstring& Title,const  d3_array& Outtmp,const dvar_vector& bb);
 void write_sim(const adstring& Title,const int& ispp);
 void write_sim_hdr(const int& ispp);
 void write_spp(const int& ispp);
 dvariable SRecruit(const dvariable& Stmp,const int& ispp);
 dvar_vector SRecruit(const dvar_vector& Stmp,const int& ispp);
 dvariable Requil(const dvariable& phi,const int& ispp);
 void Get_Bzero(const int& ispp);
 void Recruitment_Likelihood(const int& ispp);
 void Profile_F(const int& ispp);
 void get_msy(const int& ispp);
 dvariable yield(const dvariable& Ftmp, dvariable& Stmp,dvariable& Rtmp,const int& ispp);
 double get_spr_rates(double spr_percent,int& ispp);
 double spr_ratio(double& trial_F,dmatrix& sel_tmp_F, int& ispp);

};
#endif
